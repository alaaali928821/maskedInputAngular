{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class InputMaskDirective {\n  constructor(el) {\n    this.el = el;\n  }\n  onInput(event) {\n    debugger;\n    const input = this.el.nativeElement;\n    const value = input.value;\n    // Apply the phone number mask\n    const maskedValue = this.applyPhoneNumberMask(value);\n    input.value = maskedValue;\n  }\n  applyPhoneNumberMask(value) {\n    // Implement your phone number mask logic here\n    // For example, you can format it as (XXX) XXX-XXXX\n    // This is just a simple example:\n    const cleaned = value.replace(/\\D/g, ''); // Remove non-digit characters\n    const formatted = `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6, 10)}`;\n    return formatted;\n  }\n  static #_ = this.ɵfac = function InputMaskDirective_Factory(t) {\n    return new (t || InputMaskDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: InputMaskDirective,\n    selectors: [[\"\", \"appInputMask\", \"\"]],\n    hostBindings: function InputMaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function InputMaskDirective_input_HostBindingHandler($event) {\n          return ctx.onInput($event);\n        });\n      }\n    }\n  });\n}","map":{"version":3,"names":["InputMaskDirective","constructor","el","onInput","event","input","nativeElement","value","maskedValue","applyPhoneNumberMask","cleaned","replace","formatted","slice","_","i0","ɵɵdirectiveInject","ElementRef","_2","selectors","hostBindings","InputMaskDirective_HostBindings","rf","ctx","$event"],"sources":["C:\\Users\\user\\Desktop\\masked-input\\src\\app\\input-mask.directive.ts"],"sourcesContent":["\nimport { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appInputMask]'\n})\nexport class InputMaskDirective {\n  constructor(private el: ElementRef) {}\n\n  @HostListener('input', ['$event']) onInput(event: InputEvent): void {\n    debugger\n    const input = this.el.nativeElement as HTMLInputElement;\n    const value = input.value;\n    \n    // Apply the phone number mask\n    const maskedValue = this.applyPhoneNumberMask(value);\n\n    input.value = maskedValue;\n  }\n\n  private applyPhoneNumberMask(value: string): string {\n    // Implement your phone number mask logic here\n    // For example, you can format it as (XXX) XXX-XXXX\n    // This is just a simple example:\n    const cleaned = value.replace(/\\D/g, ''); // Remove non-digit characters\n    const formatted = `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6, 10)}`;\n    \n    return formatted;\n  }\n}\n\n\n// import { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n// @Directive({\n//   selector: '[appInputMask]'\n// })\n// export class InputMaskDirective {\n\n//   @Input('appInputMask') maskPattern: string = '';\n\n//   constructor(private el: ElementRef) { }\n\n//   @HostListener('input', ['$event']) onInput(event: any): void {\n//     debugger\n//     const maskedValue = this.applyMask(event.target.value);\n//     event.target.value = maskedValue;\n//     debugger\n//   }\n\n//   applyMask(value: string): string {\n//     if (!this.maskPattern) {\n//       // If no mask pattern is provided, return the original value\n//       return value;\n//     }\n//     const regex = new RegExp(this.maskPattern, 'g');\n//     const formattedValue = value.replace(regex, (match, group1, group2, group3) => {\n//       // Customize this logic based on your mask pattern\n//       return `${group1}-${group2}-${group3}`;\n//     });\n//     return formattedValue;\n//   }\n\n// }\n"],"mappings":";AAMA,OAAM,MAAOA,kBAAkB;EAC7BC,YAAoBC,EAAc;IAAd,KAAAA,EAAE,GAAFA,EAAE;EAAe;EAEFC,OAAOA,CAACC,KAAiB;IAC1D;IACA,MAAMC,KAAK,GAAG,IAAI,CAACH,EAAE,CAACI,aAAiC;IACvD,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAAK;IAEzB;IACA,MAAMC,WAAW,GAAG,IAAI,CAACC,oBAAoB,CAACF,KAAK,CAAC;IAEpDF,KAAK,CAACE,KAAK,GAAGC,WAAW;EAC3B;EAEQC,oBAAoBA,CAACF,KAAa;IACxC;IACA;IACA;IACA,MAAMG,OAAO,GAAGH,KAAK,CAACI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;IAC1C,MAAMC,SAAS,GAAG,IAAIF,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAKH,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIH,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;IAE3F,OAAOD,SAAS;EAClB;EAAC,QAAAE,CAAA,G;qBAtBUd,kBAAkB,EAAAe,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAlBlB,kBAAkB;IAAAmB,SAAA;IAAAC,YAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;iBAAlBC,GAAA,CAAApB,OAAA,CAAAqB,MAAA,CAAe;QAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}