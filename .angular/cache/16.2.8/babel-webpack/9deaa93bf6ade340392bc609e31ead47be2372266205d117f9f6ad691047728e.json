{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class InputMaskDirective {\n  constructor(el) {\n    this.el = el;\n    this.maskPattern = '';\n  }\n  onInput(event) {\n    const input = event.target;\n    const value = input.value.replace(/\\D/g, ''); // Remove\n    const maskedValue = this.applyMask(value);\n    input.value = maskedValue;\n    debugger;\n  }\n  applyMask(value) {\n    if (!this.maskPattern) {\n      // If no mask pattern is provided, return the original value\n      return value;\n    }\n    const pattern = new RegExp(this.maskPattern, 'g');\n    return value.replace(pattern, this.maskPattern);\n  }\n  static #_ = this.ɵfac = function InputMaskDirective_Factory(t) {\n    return new (t || InputMaskDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: InputMaskDirective,\n    selectors: [[\"\", \"appInputMask\", \"\"]],\n    hostBindings: function InputMaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function InputMaskDirective_input_HostBindingHandler($event) {\n          return ctx.onInput($event);\n        });\n      }\n    },\n    inputs: {\n      maskPattern: [\"appInputMask\", \"maskPattern\"]\n    }\n  });\n}","map":{"version":3,"names":["InputMaskDirective","constructor","el","maskPattern","onInput","event","input","target","value","replace","maskedValue","applyMask","pattern","RegExp","_","i0","ɵɵdirectiveInject","ElementRef","_2","selectors","hostBindings","InputMaskDirective_HostBindings","rf","ctx","$event"],"sources":["C:\\Users\\user\\Desktop\\masked-input\\src\\app\\input-mask.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[appInputMask]'\n})\nexport class InputMaskDirective {\n\n  @Input('appInputMask') maskPattern: string = '';\n\n  constructor(private el: ElementRef) { }\n\n  @HostListener('input', ['$event']) onInput(event: any): void {\n    const input = event.target;\n    const value = input.value.replace(/\\D/g, ''); // Remove\n    const maskedValue = this.applyMask(value);\n    input.value = maskedValue;\n    debugger\n  }\n\n  applyMask(value: string): string {\n    if (!this.maskPattern) {\n      // If no mask pattern is provided, return the original value\n      return value;\n    }\n    const pattern = new RegExp(this.maskPattern,'g');\n    return value.replace(pattern, this.maskPattern);\n  }\n\n}\n"],"mappings":";AAKA,OAAM,MAAOA,kBAAkB;EAI7BC,YAAoBC,EAAc;IAAd,KAAAA,EAAE,GAAFA,EAAE;IAFC,KAAAC,WAAW,GAAW,EAAE;EAET;EAEHC,OAAOA,CAACC,KAAU;IACnD,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM;IAC1B,MAAMC,KAAK,GAAGF,KAAK,CAACE,KAAK,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;IAC9C,MAAMC,WAAW,GAAG,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;IACzCF,KAAK,CAACE,KAAK,GAAGE,WAAW;IACzB;EACF;EAEAC,SAASA,CAACH,KAAa;IACrB,IAAI,CAAC,IAAI,CAACL,WAAW,EAAE;MACrB;MACA,OAAOK,KAAK;;IAEd,MAAMI,OAAO,GAAG,IAAIC,MAAM,CAAC,IAAI,CAACV,WAAW,EAAC,GAAG,CAAC;IAChD,OAAOK,KAAK,CAACC,OAAO,CAACG,OAAO,EAAE,IAAI,CAACT,WAAW,CAAC;EACjD;EAAC,QAAAW,CAAA,G;qBArBUd,kBAAkB,EAAAe,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAlBlB,kBAAkB;IAAAmB,SAAA;IAAAC,YAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;iBAAlBC,GAAA,CAAAnB,OAAA,CAAAoB,MAAA,CAAe;QAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}