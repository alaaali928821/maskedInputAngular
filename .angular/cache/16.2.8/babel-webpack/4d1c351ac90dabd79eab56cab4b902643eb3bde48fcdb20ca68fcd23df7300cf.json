{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class InputMaskDirective {\n  constructor(el) {\n    this.el = el;\n    this.maskPattern = '';\n  }\n  onInput(event) {\n    debugger;\n    const maskedValue = this.applyMask(event.target.value);\n    event.target.value = maskedValue;\n    debugger;\n  }\n  applyMask(value) {\n    if (!this.maskPattern) {\n      // If no mask pattern is provided, return the original value\n      return value;\n    }\n    const regex = new RegExp(this.maskPattern, 'g');\n    const formattedValue = value.replace(regex, (match, group1, group2, group3) => {\n      // Customize this logic based on your mask pattern\n      return `${group1}-${group2}-${group3}`;\n    });\n    return formattedValue;\n  }\n  static #_ = this.ɵfac = function InputMaskDirective_Factory(t) {\n    return new (t || InputMaskDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: InputMaskDirective,\n    selectors: [[\"\", \"appInputMask\", \"\"]],\n    hostBindings: function InputMaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function InputMaskDirective_input_HostBindingHandler($event) {\n          return ctx.onInput($event);\n        });\n      }\n    },\n    inputs: {\n      maskPattern: [\"appInputMask\", \"maskPattern\"]\n    }\n  });\n}","map":{"version":3,"names":["InputMaskDirective","constructor","el","maskPattern","onInput","event","maskedValue","applyMask","target","value","regex","RegExp","formattedValue","replace","match","group1","group2","group3","_","i0","ɵɵdirectiveInject","ElementRef","_2","selectors","hostBindings","InputMaskDirective_HostBindings","rf","ctx","$event"],"sources":["C:\\Users\\user\\Desktop\\masked-input\\src\\app\\input-mask.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[appInputMask]'\n})\nexport class InputMaskDirective {\n\n  @Input('appInputMask') maskPattern: string = '';\n\n  constructor(private el: ElementRef) { }\n\n  @HostListener('input', ['$event']) onInput(event: any): void {\n    debugger\n    const maskedValue = this.applyMask(event.target.value);\n    event.target.value = maskedValue;\n    debugger\n  }\n\n  applyMask(value: string): string {\n    if (!this.maskPattern) {\n      // If no mask pattern is provided, return the original value\n      return value;\n    }\n    const regex = new RegExp(this.maskPattern, 'g');\n    const formattedValue = value.replace(regex, (match, group1, group2, group3) => {\n      // Customize this logic based on your mask pattern\n      return `${group1}-${group2}-${group3}`;\n    });\n    return formattedValue;\n  }\n\n}\n"],"mappings":";AAKA,OAAM,MAAOA,kBAAkB;EAI7BC,YAAoBC,EAAc;IAAd,KAAAA,EAAE,GAAFA,EAAE;IAFC,KAAAC,WAAW,GAAW,EAAE;EAET;EAEHC,OAAOA,CAACC,KAAU;IACnD;IACA,MAAMC,WAAW,GAAG,IAAI,CAACC,SAAS,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC;IACtDJ,KAAK,CAACG,MAAM,CAACC,KAAK,GAAGH,WAAW;IAChC;EACF;EAEAC,SAASA,CAACE,KAAa;IACrB,IAAI,CAAC,IAAI,CAACN,WAAW,EAAE;MACrB;MACA,OAAOM,KAAK;;IAEd,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAC,IAAI,CAACR,WAAW,EAAE,GAAG,CAAC;IAC/C,MAAMS,cAAc,GAAGH,KAAK,CAACI,OAAO,CAACH,KAAK,EAAE,CAACI,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,KAAI;MAC5E;MACA,OAAO,GAAGF,MAAM,IAAIC,MAAM,IAAIC,MAAM,EAAE;IACxC,CAAC,CAAC;IACF,OAAOL,cAAc;EACvB;EAAC,QAAAM,CAAA,G;qBAxBUlB,kBAAkB,EAAAmB,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAlBtB,kBAAkB;IAAAuB,SAAA;IAAAC,YAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;;iBAAlBC,GAAA,CAAAvB,OAAA,CAAAwB,MAAA,CAAe;QAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}